<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Feature overview and syntax</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="feature, overview, syntax, features" /><meta name="Microsoft.Help.Id" content="ovr_features_and_syntax" /><meta name="Description" content="As its name stands, Cecil.Inject is an extension to Mono.Cecil that mainly provides means for method injection. However, unlike attribute-based &quot;static&quot; injection libraries, Cecil." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Mono.Cecil.Inject<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="introduction.htm" title="Mono.Cecil.Inject" tocid="roottoc">Mono.Cecil.Inject</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ovr_features_and_syntax.htm" title="Library overview" tocid="40c99fc6-0729-4894-9b17-3c5bc82579be">Library overview</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ovr_features_and_syntax.htm" title="Feature overview and syntax" tocid="ovr_features_and_syntax">Feature overview and syntax</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_method_get_and_match.htm" title="Method and field searching" tocid="ovr_method_get_and_match">Method and field searching</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_flags.htm" title="Injection flags" tocid="ovr_injection_flags">Injection flags</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_procedure.htm" title="How to inject with Cecil.Inject" tocid="ovr_injection_procedure">How to inject with Cecil.Inject</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_helper_methods.htm" title="Helper Methods" tocid="ovr_helper_methods">Helper Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Feature overview and syntax</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
      As its name stands, Cecil.Inject is an extension to Mono.Cecil that mainly provides means for method injection. 
      However, unlike attribute-based "static" injection libraries, Cecil.Inject does not encapsulate or hide the patching process itself -- quite the opposite, in fact. 
      This library is made to introduce a multitude of miscellaneous functionality to make Mono.Cecil more similar to Reflection. 
      That being said, if you are familiar with how to use .NET's reflection library, using Mono.Cecil + Cecil.Inject will be a breeze. You can think of Mono.Cecil as System.Reflection, but with all the properties and methods being set-and-get (as opposed to mostly get-only when using reflection). 
      The aim of Cecil.Inject is to bring the same syntactic sugar found in .NET's reflection library to Mono.Cecil -- that, and provide a simple method injection functionality.
      </p></div><div class="collapsibleAreaRegion" id="section_injection_manipulation"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Method injection and access manipulation</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
        	As a neat little feature, Cecil.Inject provides very simple method injection. 
        	The functionality consists of the core class <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a>, the injection options specified in <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> and a panoply of helper methods, like <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_InjectWith.htm">InjectWith</a>, <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_GetInjector.htm">GetInjector</a> and <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetInjectionMethod.htm">GetInjectionMethod</a>.
        </p><p>
        	Furthermore to make common operations with Mono.Cecil easy, <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_ChangeAccess.htm">ChangeAccess</a> method encapsulates all common operations to make any class or its member public or private.
        </p></div><div class="collapsibleAreaRegion" id="section_helpers"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Minor helpers</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        	While Mono.Cecil has an <strong>Import</strong> method to resolve all the types provided by .NET's reflection libraries, Cecil.Inject provides minor sugar to import types into Mono.Cecil. In addition, a helper method to create "dummy generic" types is provided.
        </p><p>
        	Cecil.Inject also adds other minor functionality, like assembly loading, collection slicing and IL instruction copying/replacing.
        </p></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>