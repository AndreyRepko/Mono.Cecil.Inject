<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Helper Methods</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ovr_helper_methods" /><meta name="Description" content="In addition to main methods, like method finding and injecting, Cecil.Inject provides a few additional helpers to work with managed .NET assemblies. Cecil." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Mono.Cecil.Inject<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="introduction.htm" title="Mono.Cecil.Inject" tocid="roottoc">Mono.Cecil.Inject</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ovr_features_and_syntax.htm" title="Library overview" tocid="6530b29e-a3a8-49fe-bb72-0b3d0e5415a2">Library overview</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_features_and_syntax.htm" title="Feature overview and syntax" tocid="ovr_features_and_syntax">Feature overview and syntax</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_method_get_and_match.htm" title="Method and field searching" tocid="ovr_method_get_and_match">Method and field searching</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_flags.htm" title="Injection flags" tocid="ovr_injection_flags">Injection flags</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_procedure.htm" title="How to inject with Cecil.Inject" tocid="ovr_injection_procedure">How to inject with Cecil.Inject</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ovr_helper_methods.htm" title="Helper Methods" tocid="ovr_helper_methods">Helper Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Helper Methods</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
       In addition to main methods, like method finding and injecting, Cecil.Inject provides a few additional helpers to work with managed .NET assemblies.
       Cecil.Inject attempts to expose as many utility methods as it can, from collection utilities to instruction manipulation. In this chapter we will discuss
       only the main helper methods.
      </p></div><div class="collapsibleAreaRegion" id="section_change_access"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Changing access of different elements</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
         Cecil.Inject provides a convenience method <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_ChangeAccess.htm">ChangeAccess</a>.
         The method is an extension to <strong>TypeDefinition</strong> class of Mono.Cecil and allows to easily change the accessibility of classes, structures, enumerations, methods, memebr fields and nested classes.
         <br />
         The methods takes a regular expression and a combination of different parameters that specify how to make change access. Refer to the <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_ChangeAccess.htm">documentation of ChangeAccess</a> to get more information.
        </p><p>
         As an example, consider a private class <strong>Bar</strong> with a private field <span class="code">int fInt</span>, a private method <span class="code">Foo</span> and a private nested class <strong>Baz</strong> which contains a private field <span class="code">byte fBazByte</span>.
         <br />
         We can make all the elements public by using the following expressions:
         
         <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Type definition for Bar</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeDefinition bar;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Get type definition for Bar</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// WAY 1: Make everything public one at the time</span>
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.IsPublic = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.IsPrivate = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.ChangeAccess(<span class="highlight-literal">"fInt"</span>);
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.ChangeAccess(<span class="highlight-literal">"Foo"</span>, makeVirtual: <span class="highlight-keyword">false</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.ChangeAccess(<span class="highlight-literal">"Baz"</span>);
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.ChangeAccess(<span class="highlight-literal">"Baz|fBazByte"</span>, recursive: <span class="highlight-keyword">true</span>); <span class="highlight-comment">// RegEx: Match for type Baz and fBazByte (that is inside Baz)</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// WAY 2: Make everything public at once</span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.IsPublic = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.IsPrivate = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>bar.ChangeAccess(<span class="highlight-literal">"*"</span>, makeVirtual: <span class="highlight-keyword">false</span>, recursive: <span class="highlight-keyword">true</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFAAEAAA");</script>
         
         Note that this is merely a convenience method to make access changing on multiple elements fast. For more precise
         control on how to change access, consider using <strong>IsPublic</strong> and <strong>IsPrivate</strong> properties (along with some other ones)
         of Mono.Cecil.
        </p></div><div class="collapsibleAreaRegion" id="section_param_helper"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Type creation</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
       While method searching does type conversion automatically for you, sometimes you would want to do the type creation yourself.
       One of those instances is when you are searching for methods with generic parameters and you need to specify an exact name for the generic parameter type.
       That, and much more can be done with methods found in <a href="T_Mono_Cecil_Inject_ParamHelper.htm">ParamHelper</a> class.
       <br />
       The class contains methods to create <strong>TypeReference</strong>s from <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a>.
       In addition, the <a href="M_Mono_Cecil_Inject_ParamHelper_CreateDummyType.htm">CreateDummyType(String)</a> and <a href="M_Mono_Cecil_Inject_ParamHelper_CreateGeneric.htm">CreateGeneric(String)</a> methods allow to create custom
       generic types with a specified name.
      </p><p>
       Here is an example that shows how to create various types with the provided methods.
       
       <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Type reference for System.Int32   </span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeReference intType = ParamHelper.FromType(<span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">int</span>));
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Type reference for System.String</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeReference stringType = ParamHelper.FromType&lt;<span class="highlight-keyword">string</span>&gt;();
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Type reference for List&lt;T&gt;</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeReference listType = ParamHelper.FromType(<span class="highlight-keyword">typeof</span>(List&lt;&gt;).MakeGenericType(<span class="highlight-keyword">new</span>[] { ParamHelper.CreateDummyType(<span class="highlight-literal">"T"</span>) }));
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Type reference for Dictionary&lt;U, List&lt;T&gt;&gt;</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeReference woahType = ParamHelper.FromType(<span class="highlight-keyword">typeof</span>(Dictionary&lt;,&gt;).MakeGenericType(<span class="highlight-keyword">new</span>[] { ParamHelper.CreateDummyType(<span class="highlight-literal">"U"</span>), <span class="highlight-keyword">typeof</span>(List&lt;&gt;).MakeGenericType(<span class="highlight-keyword">new</span>[] { ParamHelper.CreateDummyType(<span class="highlight-literal">"T"</span>) }) }));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAADAAA");</script></p></div><div class="collapsibleAreaRegion" id="section_inject_flags_helpers"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Injection flags manipulation</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
       To make the manipulation of different values of <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> easier,
       Cecil.Inject provides extension methods found in <a href="T_Mono_Cecil_Inject_InjectFlagMethods.htm">InjectFlagMethods</a> and a special <a href="T_Mono_Cecil_Inject_InjectValues.htm">InjectValues</a> class
       that allows to manipulate injection flags as booleans instead of using logical OR operations.
      </p><p>
       Here are a few examples on how to use the <a href="T_Mono_Cecil_Inject_InjectValues.htm">InjectValues</a> class:
       
       <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>InjectFlags flags = InjectFlags.ModifyReturn | InjectFlags.PassLocals | InjectFlags.PassParametersVal;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>InjectValues values = flags.ToValues(); <span class="highlight-comment">// Or use new InjectValues(flags)</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Check if a certain option is set</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">if</span>(values.ModifyReturn)
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Console.WriteLine(<span class="highlight-literal">"ModifyReturn is set!"</span>)
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">if</span>(values.ParameterType == InjectValues.PassParametersType.ByValue)
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Console.WriteLine(<span class="highlight-literal">"Passing parameters by value"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span>(values.ParameterType == InjectValues.PassParametersType.ByReference)
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Console.WriteLine(<span class="highlight-literal">"Passing parameters by reference"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">else</span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Console.WriteLine(<span class="highlight-literal">"No parameters are passed!"</span>)
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Modifying the values</span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>values.PassLocals = <span class="highlight-keyword">false</span>;
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>values.PassFields = <span class="highlight-keyword">true</span>;
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Converting back to InjectFlags</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>flags = values.GetCombinedFlags();
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// The new value of flags is InjectFlags.ModifyReturn | InjectFlags.PassFields | InjectFlags.PassParametersVal</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAACAAA");</script></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Assembly loading</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
       Finally, Cecil.Inject provides a simple <a href="M_Mono_Cecil_Inject_AssemblyLoader_LoadAssembly.htm">LoadAssembly(String)</a> method to load
       assemblies into Mono.Cecil. The assembly may be of any type (a DLL or an executable), as long as it is a managed .NET assembly.       
      </p><p>
       Here are a few examples on how to use the method:
       
       <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Load an assembly from a relative path</span>
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition asmDef = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"Foo.dll"</span>);
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Load an assembly from an aboslute path</span>
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition asmDef2 = AssemblyLoader.LoadAssembly(<span class="highlight-literal">@"D:\AssemblyFolder\Bar.dll"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAA");</script></p></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>