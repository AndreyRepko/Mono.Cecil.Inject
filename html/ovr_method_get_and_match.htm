<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Method and field searching</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ovr_method_get_and_match" /><meta name="Description" content="Most of the time Mono.Cecil is used to work on methods. That is why most of the method searching functionality found in System.Reflection was ported to Mono.Cecil." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Mono.Cecil.Inject<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="introduction.htm" title="Mono.Cecil.Inject" tocid="roottoc">Mono.Cecil.Inject</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ovr_features_and_syntax.htm" title="Library overview" tocid="40c99fc6-0729-4894-9b17-3c5bc82579be">Library overview</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_features_and_syntax.htm" title="Feature overview and syntax" tocid="ovr_features_and_syntax">Feature overview and syntax</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ovr_method_get_and_match.htm" title="Method and field searching" tocid="ovr_method_get_and_match">Method and field searching</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_flags.htm" title="Injection flags" tocid="ovr_injection_flags">Injection flags</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_procedure.htm" title="How to inject with Cecil.Inject" tocid="ovr_injection_procedure">How to inject with Cecil.Inject</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_helper_methods.htm" title="Helper Methods" tocid="ovr_helper_methods">Helper Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Method and field searching</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#section_getting_method">Getting method definitions</a></li><li class="outlineSectionEntry"><a href="#section_method_matching">Method matching</a></li><li class="outlineSectionEntry"><a href="#section_field_searching">Field searching</a></li></ul><p>
      	Most of the time Mono.Cecil is used to work on methods. 
      	That is why most of the method searching functionality found in System.Reflection was ported to Mono.Cecil.
      </p><p>
      	The following methods are extensions to <strong>TypeDefinition</strong> class found in Mono.Cecil. 
      	That means you can call the methods just like if it were part of <strong>TypeDefinition</strong> itself. 
      	For example, the following snippet finds a method named <strong>Foo</strong> found in type <strong>Bar</strong> from a pre-loaded assembly.
      
      	<div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition assembly;
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ... assembly is loaded into memory ...</span>
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeDefinition bar = assembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>);
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo = bar.GetMethod(<span class="highlight-literal">"Foo"</span>);                             <span class="highlight-comment">// Using the extension method as if it were native</span>
<span class="highlight-lineno">6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo2 = TypeDefinitionExtensions.GetMethod(bar, <span class="highlight-literal">"Foo"</span>);  <span class="highlight-comment">// This also works</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></p></div><div class="collapsibleAreaRegion" id="section_getting_method"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Getting method definitions</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        	The most basic extension method is <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod</a> that only searches for a method with a specified name or/and parameters. <br />
			In addition, the <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethods.htm">GetMethods</a> method searches and returns all the methods within a <strong>TypeDefinition</strong> that have the specified name. If no matching methods are found, the method returns an empty array.
        </p><p>
        	If you only need a single method, consider using <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod</a> that finds the first matching occurrence on <span class="code">null</span> if no matches are found. 
        	The method comes in two flavours: <em>name-only</em> and <em>name-and-parameters</em>. The former variant has only a single parameter -- the name of the method to search for. Using the latter version you can also specify the type of the parameters the method should have.
        	Note that
        	
			<ul><li><p>The order of the parameters must be the same as defined in the method itself</p></li><li><p>There are multiple overrides of *name-and-parameters* variant depending on the type of the parameter type they accept. Internally they all return the same method for the same set of parameters.</p></li></ul></p><p>
        	As an example, consider a type <strong>Bar</strong> that has two methods in it: <span class="code">Foo()</span> and <span class="code">Foo(string foo1, bool foo2)</span>. The snippet below shows how to use the above methods
        	
        	<div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition assembly;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ... assembly is loaded into memory</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeDefinition bar = assembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>);
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition[] foos = bar.GetMethods(<span class="highlight-literal">"Foo"</span>);    <span class="highlight-comment">// Returns an array of all Foo methods</span>
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo1 = bar.GetMethod(<span class="highlight-literal">"Foo"</span>);       <span class="highlight-comment">// Returns Foo()</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// NOTE: The following methods are all equivalent (they return the same method -- that is Foo(string foo1, bool foo2))</span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// WAY 1: Using TypeReference from Mono.Cecil</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo2 = bar.GetMethod(<span class="highlight-literal">"Foo"</span>, assembly.MainModule.Import(<span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>)), assembly.MainModule.Import(<span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">bool</span>));
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// WAY 2: Using Type from System</span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo3 = bar.GetMethod(<span class="highlight-literal">"Foo"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>), <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">bool</span>));
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// WAY 3: Using types' string representation</span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition foo4 = bar.GetMethod(<span class="highlight-literal">"Foo"</span>, <span class="highlight-literal">"System.String"</span>, <span class="highlight-literal">"System.Boolean"</span>);
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefintion none = bar.GetMethod(<span class="highlight-literal">"Baz"</span>);       <span class="highlight-comment">// Returns null, since there are no such methods in Bar</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAADAAA");</script></p></div><div class="collapsibleAreaRegion" id="section_method_matching"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Method matching</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
       In addition to getting methods, you can also search for methods that only partially match with the specified parameter types. 
       That is done with the <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_MatchMethod.htm">MatchMethod</a> method.<br />
       While the signatures are almost the same as those of <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod</a> there are a few key differences:
      
      <ul><li><p><a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_MatchMethod.htm">MatchMethod</a> returns methods that have <em>at least</em> the specfied parameters.</p></li><li><p><a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_MatchMethod.htm">MatchMethod</a> returns all methods that match, which is why it returns an array.</p></li></ul><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_MatchMethod.htm">MatchMethod</a> is order-sensitive! That means that it only matches methods that have the provided parameters in the right order.</td></tr></table></div></p><p>
	  As an example, consider a type <strong>Bar</strong> that has methods <span class="code">Foo(string foo1, bool foo2)</span>, <span class="code">Foo(string foo1, int foo2)</span> and <span class="code">Foo(int foo1, string foo2)</span>. The snippet below shows how to use the matching methods. 
	  <em>Here we use only one override, but just as with <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod</a>, all the variations are the same.</em><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition assembly;
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ... assembly is loaded into memory</span>
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeDefinition bar = assembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>);
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition[] foos1 = bar.MatchMethod(<span class="highlight-literal">"Foo"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));   <span class="highlight-comment">// Returns Foo(string foo1, bool foo2) and Foo(string foo1, int foo2)</span>
<span class="highlight-lineno">7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>MethodDefinition[] foos2 = bar.MatchMethod(<span class="highlight-literal">"Foo"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">int</span>));      <span class="highlight-comment">// Returns Foo(int foo1, string</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAACAAA");</script></p></div><div class="collapsibleAreaRegion" id="section_field_searching"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Field searching</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
       Cecil.Inject provides a very small helper to search for member fields -- <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetField.htm">GetField</a>.
       The method merely returns the first field it finds that matches the provided name.
      </p><p>
       As an example, consider a type <strong>Bar</strong> that has a field <span class="code">int foo</span> (the accessibility does not matter). The method can be then used as follows
       
       <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AssemblyDefinition assembly;
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ... assembly is loaded into memory</span>
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>TypeDefinition bar = assembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>);
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>FieldDefinition foo = bar.GetField(<span class="highlight-literal">"foo"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAA");</script></p></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>