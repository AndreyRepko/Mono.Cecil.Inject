<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to inject with Cecil.Inject</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ovr_injection_procedure" /><meta name="Description" content="While Mono.Cecil exposes the contents of any managed .NET assembly and allows to edit everything in it, all the code injection must be done manually by adding IL insturctions into the method. Cecil." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Mono.Cecil.Inject<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="introduction.htm" title="Mono.Cecil.Inject" tocid="roottoc">Mono.Cecil.Inject</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ovr_features_and_syntax.htm" title="Library overview" tocid="b5626774-f8a7-4c02-a7da-d8d66d9765ef">Library overview</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_features_and_syntax.htm" title="Feature overview and syntax" tocid="ovr_features_and_syntax">Feature overview and syntax</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_method_get_and_match.htm" title="Method and field searching" tocid="ovr_method_get_and_match">Method and field searching</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_flags.htm" title="Injection flags" tocid="ovr_injection_flags">Injection flags</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_procedure.htm" title="How to inject with Cecil.Inject" tocid="ovr_injection_procedure">How to inject with Cecil.Inject</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_helper_methods.htm" title="Helper Methods" tocid="ovr_helper_methods">Helper Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">How to inject with Cecil.Inject</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#section_normal_way">Method 1: The traditional way</a></li><li class="outlineSectionEntry"><a href="#section_shortcut">Method 2: Using shortcut methods</a></li><li class="outlineSectionEntry">Method 3: Automatically create injectors for multiple targets</li></ul><p>
       While Mono.Cecil exposes the contents of any managed .NET assembly and allows to edit everything in it, all the code injection must be done manually by adding IL insturctions into the method.
       Cecil.Inject attempts to simplify method injection by automating IL instruction editing and providing one-call methods to perform injections.
       In addition Cecil.Inject verifies every injection, so that no broken assemblies are created.
      </p><p>
       Cecil.Inject provides many ways to perform an injection, but they all contain the following steps:
              
       <ol><li><p>Define the injection method that follows the same structure as described in <a href="ovr_injection_flags.htm">Injection flags</a>.</p></li><li><p>Load the assemblies with the injection method and the injection target.</p></li><li><p>Get the <strong>MethodDefiniton</strong> for the injection target and the injection method with <a href="Overload_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod</a> (or others).</p></li><li><p>Create an instance of <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a> specifying the methods and additional settings.</p></li><li><p>Call the <a href="Overload_Mono_Cecil_Inject_InjectionDefinition_Inject.htm">Inject</a> method.</p></li></ol></p><p>
       In this chapter we will take a look at all the ways the injection can be performed.
       <div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>
        Be sure to check the <a href="ovr_injection_flags.htm">Injection flags</a> chapter to understand how to specify the right injection flags.
       </td></tr></table></div></p></div><div class="collapsibleAreaRegion" id="section_normal_way"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Method 1: The traditional way</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
        This is the most basic way to inject methods. Here, we simply follow the steps described above. 
        For the sake of example, let us consider class <strong>Bar</strong> with method <span class="code">Foo(int v1, bool v2)</span>.
        In this example, we want to inject it with the hook method that will receive the parameters of the method and the invoking instance of <strong>Bar</strong>.
       </p><h3 class="procedureSubHeading">Do the following</h3><div class="subSection"><ol><li><p>Create an assembly with the hook method that follows the structure introduced in the chapter <a href="ovr_injection_flags.htm">Injection flags</a>.</p><p>
             In our hook assembly we define a static class <strong>MyHookClass</strong> with the hook method in it:
             <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAADBAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAADBAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAADBAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAADBAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">namespace</span> HookNamespace
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> MyHookClass 
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> MyHook(Bar self, <span class="highlight-keyword">int</span> v1, <span class="highlight-keyword">bool</span> v2)
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Write hook's code here</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAADBAADAAA");</script>
             Note that the class with the hook methods in it does not have to be static, but it advised to have it set to static.
            </p></li><li><p>Create a patcher and load the hook assembly along with the assembly that is to be patched.</p><p>
            In this example we create a <strong>Patcher</strong> class method <span class="code">Patch</span> in it.
            Firstly, we will use <a href="M_Mono_Cecil_Inject_AssemblyLoader_LoadAssembly.htm">LoadAssembly(String)</a> to load the needed assemblies.
            The structure of the <strong>Patcher</strong> class is thus the following:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAACBAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAACBAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAACBAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAACBAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Next steps...</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAACBAADAAA");</script></p></li><li><p>Get <strong>MethodDefinition</strong> for the injection method and the injection target.</p><p>
            Next, we update our <span class="code">Patch</span> method by getting the hook and the target. We do that by using <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod(TypeDefinition, String)</a>,
            since we clearly don't have any conflicting overrides in our assemblies. The class now looks as follows:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABBAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABBAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABBAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABBAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection definition</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition myHook = hookAssembly.MainModule.GetType(<span class="highlight-literal">"HookNamespace.MyHookClass"</span>).GetMethod(<span class="highlight-literal">"MyHook"</span>);
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection target. </span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Note that in this example class Bar is in the global namespace (no namespace), which is why we don't specify the namespace.</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition foo = targetAssembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>).GetMethod(<span class="highlight-literal">"Foo"</span>);
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Next steps...</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABBAADAAA");</script></p></li><li><p>Create an injector (an instance of <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a>) and call the <a href="Overload_Mono_Cecil_Inject_InjectionDefinition_Inject.htm">Inject</a> method.</p><p>
            Finally, we can create the injector and perform the injection:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHAAABAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHAAABAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHAAABAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHAAABAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection definition</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition myHook = hookAssembly.MainModule.GetType(<span class="highlight-literal">"HookNamespace.MyHookClass"</span>).GetMethod(<span class="highlight-literal">"MyHook"</span>);
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection target. </span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Note that in this example class Bar is in the global namespace (no namespace), which is why we don't specify the namespace.</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition foo = targetAssembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>).GetMethod(<span class="highlight-literal">"Foo"</span>);
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Create the injector</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        InjectionDefinition injector = <span class="highlight-keyword">new</span> InjectionDefinition(foo, myHook, InjectFlags.PassInvokingInstance | InjectFlags.passParametersVal);
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Perform the injection with default settings (inject into the beginning before the first instruction)</span>
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        injector.Inject();
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// More injections or saving the target assembly...</span>
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHAAABAADAAA");</script>
            
            Note the following:
            
             <ul><li><p>
               The constructor for <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a> requires the injection flags of the hook method.
               If the flags and the hook signature don't match, an exception will be thrown. For more information on how to specify the injection flags, refer to <a href="ovr_injection_flags.htm">Injection flags</a>.
              </p></li><li><p>The constructor for <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a> also takes addition parameters, like list of the fields and local variables to pass. Refer to <a href="M_Mono_Cecil_Inject_InjectionDefinition__ctor.htm">the constructor of InjectionDefinition</a>.</p></li></ul>
             
            After injecting you can either apply more injections or you can save the target assembly by using the <strong>Write</strong> methods found in <strong>AssemblyDefinition</strong> class.
           </p></li></ol></div></div><div class="collapsibleAreaRegion" id="section_shortcut"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Method 2: Using shortcut methods</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
        Here, we look at how injections can be performed with a single method using the <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_InjectWith.htm">InjectWith</a>.
        For the sake of example, let us consider class <strong>Bar</strong> with method <span class="code">Foo(int v1, bool v2)</span>.
        In this example, we want to inject it with the hook method that will receive the parameters of the method and the invoking instance of <strong>Bar</strong>.
       </p><h3 class="procedureSubHeading">Do the following</h3><div class="subSection"><ol><li><p>Create an assembly with the hook method that follows the structure introduced in the chapter <a href="ovr_injection_flags.htm">Injection flags</a>.</p><p>
             In our hook assembly we define a static class <strong>MyHookClass</strong> with the hook method in it:
             <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAADBAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAADBAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAADBAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAADBAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">namespace</span> HookNamespace
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> MyHookClass 
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> MyHook(Bar self, <span class="highlight-keyword">int</span> v1, <span class="highlight-keyword">bool</span> v2)
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Write hook's code here</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAADBAACAAA");</script>
             Note that the class with the hook methods in it does not have to be static, but it advised to have it set to static.
            </p></li><li><p>Create a patcher and load the hook assembly along with the assembly that is to be patched.</p><p>
            In this example we create a <strong>Patcher</strong> class with method <span class="code">Patch</span> in it.
            Firstly, we will use <a href="M_Mono_Cecil_Inject_AssemblyLoader_LoadAssembly.htm">LoadAssembly(String)</a> to load the needed assemblies.
            The structure of the <strong>Patcher</strong> class is thus the following:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAACBAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAACBAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAACBAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAACBAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Next steps...</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAACBAACAAA");</script></p></li><li><p>Get <strong>MethodDefinition</strong> for the injection method and the injection target.</p><p>
            Next, we update our <span class="code">Patch</span> method by getting the hook and the target. We do that by using <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethod.htm">GetMethod(TypeDefinition, String)</a>,
            since we clearly don't have any conflicting overrides in our assemblies. The class now looks as follows:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABBAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABBAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABBAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABBAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection definition</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition myHook = hookAssembly.MainModule.GetType(<span class="highlight-literal">"HookNamespace.MyHookClass"</span>).GetMethod(<span class="highlight-literal">"MyHook"</span>);
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection target. </span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Note that in this example class Bar is in the global namespace (no namespace), which is why we don't specify the namespace.</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition foo = targetAssembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>).GetMethod(<span class="highlight-literal">"Foo"</span>);
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Next steps...</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABBAACAAA");</script></p></li><li><p>Use <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_InjectWith.htm">InjectWith</a> method.</p><p>
            Finally, we can create the injector and perform the injection:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHAAABAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHAAABAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHAAABAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHAAABAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection definition</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition myHook = hookAssembly.MainModule.GetType(<span class="highlight-literal">"HookNamespace.MyHookClass"</span>).GetMethod(<span class="highlight-literal">"MyHook"</span>);
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the method definition for the injection target. </span>
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Note that in this example class Bar is in the global namespace (no namespace), which is why we don't specify the namespace.</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition foo = targetAssembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>).GetMethod(<span class="highlight-literal">"Foo"</span>);
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Perform the injection with default settings (inject into the beginning before the first instruction</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        foo.InjectWith(myHook, flags: InjectFlags.PassInvokingInstance | InjectFlags.passParametersVal);
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// More injections or saving the target assembly...</span>
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHAAABAACAAA");</script>
            
            Note the following:
            
             <ul><li><p>
               The creation of an instance of <a href="T_Mono_Cecil_Inject_InjectionDefinition.htm">InjectionDefinition</a> and injecting is done automatically within the <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_InjectWith.htm">InjectWith</a> method.
              </p></li><li><p>
               The method requires the injection flags of the hook method.
               If the flags and the hook signature don't match, an exception will be thrown. For more information on how to specify the injection flags, refer to <a href="ovr_injection_flags.htm">Injection flags</a>.
              </p></li><li><p>The method also takes addition parameters, like list of the fields and local variables to pass. Refer to <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_InjectWith.htm">the documentation of InjectWith</a>.</p></li></ul>
             
            After injecting you can either apply more injections or you can save the target assembly by using the <strong>Write</strong> methods found in <strong>AssemblyDefinition</strong> class.
           </p></li></ol></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Method 3: Automatically create injectors for multiple targets</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
       This method is great for situations when there are multiple injection targets with varying method signatures and the goal is to hook them all to a single hook.
       In this case instead of explicitly creating the right injectors we can let Cecil.Inject figure out which hook fits the target best. This can be accomplished by using
       either <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetInjectionMethod.htm">GetInjectionMethod</a> or <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_GetInjector.htm">GetInjector</a>.
      </p><p>
       In this example we consider the class <strong>Bar</strong> with methods <span class="code">Foo(int v1, int v2)</span>, <span class="code">Foo(int v1, long v2)</span> and <span class="code">Foo(int v1, string v2)</span> and with field <span class="code">int[] fArray</span>.
       The goal is to inject them with a hook method that will receive the <span class="code">fArray</span> field and methods' parameters. Unfortunately, since different overrides of <span class="code">Foo</span> have different parameter types, it would require to go through each method and inject it separately.
       However, with Cecil.Inject, we can use the above-mentioned methods to automate injection.
      </p><h3 class="procedureSubHeading">Do the following</h3><div class="subSection"><ol><li><p>Create an assembly with the hook methods that follow the structure introduced in the chapter <a href="ovr_injection_flags.htm">Injection flags</a>.</p><p>
             In our hook assembly we define a static class <strong>MyHookClass</strong> with the hook methods in it:
             <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAACBAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAACBAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAACBAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAACBAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">namespace</span> HookNamespace
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> MyHookClass 
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> FooHook(<span class="highlight-keyword">ref</span> <span class="highlight-keyword">int</span>[] fArray, <span class="highlight-keyword">int</span> v1, <span class="highlight-keyword">long</span> v2)
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Write hook's code here</span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> FooHook(<span class="highlight-keyword">ref</span> <span class="highlight-keyword">int</span>[] fArray, <span class="highlight-keyword">int</span> v1, <span class="highlight-keyword">int</span> v2)
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            FooHook(<span class="highlight-keyword">ref</span> fArray, v1, (<span class="highlight-keyword">long</span>) v2);
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> FooHook(<span class="highlight-keyword">ref</span> <span class="highlight-keyword">int</span>[] fArray, <span class="highlight-keyword">int</span> v1, String v2)
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            FooHook(<span class="highlight-keyword">ref</span> <span class="highlight-keyword">int</span>[], v1, <span class="highlight-keyword">long</span>.Parse(v2));
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAACBAABAAA");</script>
             
             Note how all the hook logic is written only in one method, while other hooks simply call the first one. That way we need not write the same logic for all the hooks, and adding new hooks is really simple.
             If there were methods like <span class="code">Foo(bool v1)</span>, we could simply rewrite the hook class by moving the hook logic to a separate method that would have all the parameters of other hook methods and make the
             hooks call that method instead.
            </p></li><li><p>Create a patcher and load the hook assembly along with the assembly that is to be patched.</p><p>
             In this example we create a <strong>Patcher</strong> class with method <span class="code">Patch</span> in it.
             Firstly, we will use <a href="M_Mono_Cecil_Inject_AssemblyLoader_LoadAssembly.htm">LoadAssembly(String)</a> to load the needed assemblies.
             The structure of the <strong>Patcher</strong> class is thus the following:
             
             <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABBAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABBAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABBAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABBAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Next steps...</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABBAABAAA");</script></p></li><li><p>Get <strong>MethodDefinition</strong> for the injection methods and use <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetInjectionMethod.htm">GetInjectionMethod</a> (or <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_GetInjector.htm">GetInjector</a>) to get the injector and perform the injection.</p><p>
            Next, we update our <span class="code">Patch</span> method to find all the method defintions for the <span class="code">Foo</span> method and inject each one of them with the appropriate injection method. We do that by using <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetMethods.htm">GetMethods(TypeDefinition, String)</a>,
            since we want to inject hooks into all the overrides of <span class="code">Foo</span>. After that, we iterate through all the injection targets and create the injector with a suitable injection method (here we do it with <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetInjectionMethod.htm">GetInjectionMethod</a>, but it can be also done with <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_GetInjector.htm">GetInjector</a>).  
            Finally we preform the injection by using the <a href="Overload_Mono_Cecil_Inject_InjectionDefinition_Inject.htm">Inject</a> method.
            The class now looks as follows:
            
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHAAABAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHAAABAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHAAABAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHAAABAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil;
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">using</span> Mono.Cecil.Inject;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Patcher
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{    
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Patch()
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly that contains the hook method</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition hookAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"MyHookAssembly.dll"</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Load the assembly</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        AssemblyDefinition targetAssembly = AssemblyLoader.LoadAssembly(<span class="highlight-literal">"TargetAssembly.dll"</span>);
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the type Bar</span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// In this example Bar is in the global namespace, so we don't have to specify it</span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        TypeDefinition bar = targetAssembly.MainModule.GetType(<span class="highlight-literal">"Bar"</span>);
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the type MyHookClass</span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Note how we have to specify the namespace</span>
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        TypeDefinition hooks = hookAssembly.MainModule.GetType(<span class="highlight-literal">"HookNamespace.MyHookClass"</span>);
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get all the overrides of method Foo</span>
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        MethodDefinition[] foos = bar.GetMethods(<span class="highlight-literal">"Foo"</span>);
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Get the field definition of fArray</span>
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        FieldDefinition fArray = bar.GetField(<span class="highlight-literal">"fArray"</span>);
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-keyword">foreach</span>(MethodDefinition foo <span class="highlight-keyword">in</span> foos)
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        {
<span class="highlight-lineno">28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Find a suitable override of FooHook for an override of Foo and create an injector out of it</span>
<span class="highlight-lineno">29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            InjectionDefinition injector = hooks.GetInjectionMethod(<span class="highlight-literal">"FooHook"</span>, foo, InjectFlags.PassFields | InjectFlags.PassParametersVal, <span class="highlight-keyword">null</span>, fArray);
<span class="highlight-lineno">30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Perform the injection with default parameters (inject into the beginning before the first operation)</span>
<span class="highlight-lineno">31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            <span class="highlight-comment">// Since GetInjectionMethod can return null, we use the null-conditional operator (?) so that the Inject method is called only when injector is not null</span>
<span class="highlight-lineno">32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>            injector?.Inject();
<span class="highlight-lineno">33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        }
<span class="highlight-lineno">34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// Perform other injections or save the modified assembly...</span>
<span class="highlight-lineno">36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHAAABAABAAA");</script>
            
            Note the following:
            
             <ul><li><p>
               The usage of <a href="M_Mono_Cecil_Inject_TypeDefinitionExtensions_GetInjectionMethod.htm">GetInjectionMethod</a> (or <a href="M_Mono_Cecil_Inject_MethodDefinitionExtensions_GetInjector.htm">GetInjector</a>) requires the injection flags of the hook method.
               If the no injection methods with the specified flags are found, the methods simply return <span class="code">null</span>. For more information on how to specify the injection flags, refer to <a href="ovr_injection_flags.htm">Injection flags</a>.
              </p></li><li><p>The above-mentioned methods also take addition parameters, like list of the fields (which we used in this case) and local variables to pass. Refer to <a href="M_Mono_Cecil_Inject_InjectionDefinition__ctor.htm">the constructor of InjectionDefinition</a>.</p></li></ul>
             
            After injecting you can either apply more injections or you can save the target assembly by using the <strong>Write</strong> methods found in <strong>AssemblyDefinition</strong> class.
           </p></li></ol></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>