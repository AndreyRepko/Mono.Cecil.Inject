<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Injection flags</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ovr_injection_flags" /><meta name="Description" content="Cecil.Inject includes a simple, yet rather versatile, set of methods to inject methods into others. In fact, all of the injection is handled by a single M:Mono.Cecil.Inject.InjectionDefinition.Inject(System.Int32,System.Int32,Mono.Cecil.Inject." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Mono.Cecil.Inject<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="introduction.htm" title="Mono.Cecil.Inject" tocid="roottoc">Mono.Cecil.Inject</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ovr_features_and_syntax.htm" title="Library overview" tocid="6530b29e-a3a8-49fe-bb72-0b3d0e5415a2">Library overview</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_features_and_syntax.htm" title="Feature overview and syntax" tocid="ovr_features_and_syntax">Feature overview and syntax</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_method_get_and_match.htm" title="Method and field searching" tocid="ovr_method_get_and_match">Method and field searching</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_flags.htm" title="Injection flags" tocid="ovr_injection_flags">Injection flags</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_injection_procedure.htm" title="How to inject with Cecil.Inject" tocid="ovr_injection_procedure">How to inject with Cecil.Inject</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ovr_helper_methods.htm" title="Helper Methods" tocid="ovr_helper_methods">Helper Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Injection flags</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#injection_flags">Injection flags</a></li><li class="outlineSectionEntry"><a href="#section_examples">Examples</a></li></ul><p>
       Cecil.Inject includes a simple, yet rather versatile, set of methods to inject methods into others.
       In fact, all of the injection is handled by a single <a href="Overload_Mono_Cecil_Inject_InjectionDefinition_Inject.htm">Inject</a> method.
       To make Cecil.Inject support a large variety of different injection methods, the library explicitly specifies the signature of the injection methods. The signature is customisable using different combinations of <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a>.
       <br />
       In this section we discuss the supported injection method signature and how to edit it using the injection flags.
      </p></div><div class="collapsibleAreaRegion" id="injection_flags"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Injection flags</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
         Cecil.Inject allows to configure what information is passed to the injection method and how the injection method should perform method redirection. 
         As you will see later, this is done by specifying a combination of different <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a>. 
         The flags can be combined with a logical OR operation (<span class="code">|</span> operator).
        </p><p>
         Below is the generic layout of an injection method that Cecil.Inject supports.
         
         <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFBBCAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFBBCAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFBBCAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFBBCAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> &lt;<span class="highlight-number">3</span>&gt; MyHook(&lt;<span class="highlight-number">1</span>&gt;, &lt;<span class="highlight-number">2</span>&gt;, &lt;<span class="highlight-number">4</span>&gt;, &lt;<span class="highlight-number">5</span>&gt;, &lt;<span class="highlight-number">6</span>&gt;, &lt;<span class="highlight-number">7</span>&gt;);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFBBCAAA");</script>
         
         The number surrounded by arrow brackets (i.e. <span class="code">&lt;1&gt;</span>) means that the type of the value that goes in it depends on which <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> is specified. 
        </p><p>
         Next, below there are two tables with all available <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a>. The first table specifies how to alter the template depending on the chosen flags. The second table contains description for each of the flags.
        </p><h4 class="subHeading" id="subsection_template_table">Template table</h4><div class="subsection"><div class="tableSection"><table><tr><th><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> value</p></th><th><p>How the template is affected (<em>IF SET</em>)</p></th><th><p>How the template is affected (<em>IF NOT SET</em>)</p></th></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">None</a></p></td><td><p>&lt;3&gt; = <span class="code">void</span></p></td><td>Cannot be unset.</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassTag</a></p></td><td><p>&lt;1&gt; = <span class="code">int</span></p></td><td>&lt;1&gt; = empty</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassInvokingInstance</a></p></td><td><p>&lt;2&gt; = <span class="code">T</span></p></td><td>&lt;2&gt; = empty</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">ModifyReturn</a></p></td><td><p>
                    &lt;3&gt; = <span class="code">bool</span><br /><em>If target returns <span class="code">void</span>: </em>&lt;4&gt; = empty<br /><em>Otherwise: </em>&lt;4&gt; = <span class="code">out T</span></p></td><td>
                   	&lt;3&gt; = <span class="code">void</span><br />
                   	&lt;4&gt; = empty
                   </td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassLocals</a></p></td><td><p>&lt;5&gt; = <span class="code">ref T_1, ref T_2, ...</span></p></td><td>&lt;5&gt; = empty</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassFields</a></p></td><td><p>&lt;6&gt; = <span class="code">ref T_1, ref T_2, ...</span></p></td><td>&lt;6&gt; = empty</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersVal</a></p></td><td><p>&lt;7&gt; = <span class="code">T_1, T_2, ...</span></p></td><td>&lt;7&gt; = empty</td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersRef</a></p></td><td><p>&lt;7&gt; = <span class="code">ref T_1, ref T_2, ...</span></p></td><td>&lt;7&gt; = empty</td></tr></table></div></div><h4 class="subHeading" id="subsection_description">Description table</h4><div class="subsection"><div class="tableSection"><table><tr><th><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> value</p></th><th><p>Description</p></th></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">None</a></p></td><td><p>Nothing is passed to the injection method. The method is simply called when the injection target runs, and the injection method does not alter the execution of the target in any way.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassTag</a></p></td><td><p>A 32-bit signed integer is passed to the injection method. The value of the tag is specified when performing the injection. Useful if you have the method injection into multiple targets and need to differentiate between the targets that call the injection method.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassInvokingInstance</a></p></td><td><p>Pass the instance of the type <strong>T</strong> that contains the injection target and that called the injection method. In other words: passes <span class="code">this</span> to the injection method. Note that the target method <em>must not be static</em>. If the target is static, but this flag is set, Cecil.Inject will handle the error depending on how the injector is created.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">ModifyReturn</a></p></td><td><p>Specifies that the injection method is injected by method redirection. The return value of the injection method determines the behaviour of the target: if the injection method returns <span class="code">true</span>, the target returns right after running the injection method; if set to <span class="code">false</span>, the target continues executing its logic after having returned from the injection method. Moreover, if the target has a return type <strong>T</strong> that is not <span class="code">void</span>, the injection method specifies its own custom return value. The custom return value is used only if the injection method itself returns <span class="code">true</span>.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassLocals</a></p></td><td><p>Pass local variables of types <strong>T_1</strong>, <strong>T_2</strong>, etc. found in the injection method itself. Note that the value of them depends on the place where the injection method is injected -- the value might even not be initialized at the time the target calls the injection method. The locals are always passed by reference, which means that you can alter their value and thus change how the target executes its code.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassFields</a></p></td><td><p>Pass type fields of types <strong>T_1</strong>, <strong>T_2</strong>, etc. found in the type that contains the injection target. Note that the method <em>must not be static</em>. If the target is static, but this flag is set, Cecil.Inject will handle the error depending on how the injector is created.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersVal</a></p></td><td><p>Passes the parameters of types <strong>T_1</strong>, <strong>T_2</strong>, etc. from the injection target. The parameters are passed by value and thus changing them will not alter them in the target method itself. The parameters must be in the same order as in the injection target.<br /> In Cecil.Inject 1.1+ some of the injector creators allow that the injection method doesn't have all of the parameters in its signature (so-called <em>partial parameter passing</em>). <em>Cannot be combined with <a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersRef</a>.</em></p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersRef</a></p></td><td><p>Passes the parameters of types <strong>T_1</strong>, <strong>T_2</strong>, etc. from the injection target . The parameters are passed by reference, which means that changing their values will change the value of the parameters of the target method. The parameters must be in the same order as in the injection target.<br /> In Cecil.Inject 1.1+ some of the injector creators allow that the injection method doesn't have all of the parameters in its signature (so-called p<em>artial parameter passing</em>). <em>Cannot be combined with <a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersVal</a>.</em></p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">All_Val</a></p></td><td><p>Shorthand for flag combination <span class="code">PassTag | PassInvokingInstance | PassLocals | PassFields | PassParametersVal</span>.</p></td></tr><tr><td><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">All_Ref</a></p></td><td><p>Shorthand for flag combination <span class="code">PassTag | PassInvokingInstance | PassLocals | PassFields | PassParametersRef</span>.</p></td></tr></table></div></div><h4 class="subHeading" id="subsection_important">Important things to consider</h4><div class="subsection"><ul><li><p><em>All hooks must always be public and static.</em></p></li><li><p>The injection flags only specify <em>what types</em> are inserted in the template. The name of the parameters of the injection method are not important.</p></li><li><p>If the injection target has generic parameters and either <a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersVal</a> or <a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassParametersRef</a> is set, the injection method <em>must have the same generic types specified</em>. Moreover, <em>the type names must be the same.</em></p></li><li><p>Setting some flags may result in errors when using injector creators! For instance setting the <a href="T_Mono_Cecil_Inject_InjectFlags.htm">PassFields</a> on a static method or setting <span class="code">InjectFlags.PassParametersVal | InjectFlags.PassParametersRef</span> will result in Cecil.Inject either throwing an exception or returning a <span class="code">null</span> for an injector.</p></li><li><p><a href="T_Mono_Cecil_Inject_InjectFlags.htm">None</a> flag is always set! That way the return type of the injection method is always <span class="code">void</span> except maybe when using the <a href="T_Mono_Cecil_Inject_InjectFlags.htm">ModifyReturn</a> flag.</p></li></ul></div></div><div class="collapsibleAreaRegion" id="section_examples"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection">
      As an example let us consider a few hooks and which <a href="T_Mono_Cecil_Inject_InjectFlags.htm">InjectFlags</a> value they statisfy.
     <h4 class="subHeading" id="subsection_ex1">Example 1: Hook with no parameters</h4><div class="subsection">
        One needs a hook that is simply called every time the target is called. The hook does not need any parameters, tags, locals, fields nor instances. Thus the injection flag is <a href="T_Mono_Cecil_Inject_InjectFlags.htm">None</a> and the hook is
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> MyHook();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACABAAA");</script>
        
        According to the template &lt;3&gt; = <span class="code">void</span> and the rest is empty.
       </div><h4 class="subHeading" id="subsection_ex2">Example 2: Hook with invoking instance and target method's parameters</h4><div class="subsection">
        One needs a hook for the method <span class="code">Foo(int v1, string v2)</span> found in <strong>Bar</strong> class. The hook needs <span class="code">this</span> value from the target method and the method's parameters by value. Thus the injection flag is <span class="code">InjectFlags.PassInvokingInstance | InjectFlags.PassParametersVal</span> and the hook itself is
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> MyHook2(Bar self, <span class="highlight-keyword">int</span> v1, <span class="highlight-keyword">string</span> v2);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHABABAAA");</script>
        
        Here the template is &lt;2&gt; = <span class="code">Bar</span>, &lt;3&gt; = <span class="code">void</span>, &lt;7&gt; = <span class="code">int, string</span> and the rest is empty.
       </div><h4 class="subHeading" id="subsection_ex1">Example 3: Hook with invoking instance, method redirection, class fields and parameters (one of which is generic)</h4><div class="subsection">
        One needs a hook for the method <span class="code">T[] Foo&lt;T&gt;(List&lt;T&gt; v1, byte[] v2, byte v3)</span> found in the class <strong>Bar</strong>. The hooks needs <span class="code">this</span> value, class field <span class="code">uint barField</span> and the target's parameters. The hook should also be injected by method redirection. Thus the injection flag is <span class="code">InjectFlags.PassInvokingInstance | InjectFlags.ModifyReturn | InjectFlags.PassFields | InjectFlags.PassParametersVal</span> and the hook's signature is
        
        <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EALAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EALAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EALAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">bool</span> MyHook3&lt;T&gt;(Bar self, <span class="highlight-keyword">out</span> T[] ret, <span class="highlight-keyword">ref</span> <span class="highlight-keyword">uint</span> barField, List&lt;T&gt; v1, <span class="highlight-keyword">byte</span>[] v2, <span class="highlight-keyword">byte</span> v3);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EALAAABAAA");</script>
        
        Here the template is &lt;2&gt; = <span class="code">Bar</span>, &lt;3&gt; = <span class="code">bool</span>, &lt;4&gt; = <span class="code">out T[]</span>, &lt;6&gt; = <span class="code">ref uint</span>, &lt;7&gt; = <span class="code">List&lt;T&gt;, byte[], byte</span>.
       </div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>